from page_2_funcoes import refs,encoded_image,SIDEBAR_STYLE,CONTENT_STYLE,dropdown_style,muns, uhs,dmuns,duhs
from dash import html,dcc, callback, clientside_callback
import dash
import plotly.express as px
from dash.dependencies import Input, Output

dash.register_page(__name__, path="/")




#dados --------------------------------------------------------------------------------------------




# style --------------------------------------------------------------------------------------------


sidebar = html.Div([



    html.Br(),

    html.H5("Anomalias de Precipitação"),
    html.Hr(style={ "height": "1%", "Color": "#b8860b"}),
    html.P('Mês de referência'),
    html.Div([
        dcc.Dropdown(
            options = refs,
            value = refs[-1],
            id = 'referencia',
            style = dropdown_style
        ),
        html.Hr(),
        dcc.RadioItems(
            options=[
                {'label': ' Municípios', 'value': 'muns'},
                {'label': ' Unidades Hidrográficas', 'value': 'uhs'},],
            value='muns',
            id = 'limites',
            labelStyle = {'display':'block'},
        ),
        html.Hr(),
        dcc.RadioItems(
            options=[
                {'label': ' Mensal', 'value': 1},
                {'label': ' Trimestral', 'value': 3},
                {'label': ' Semestral', 'value': 6},
                {'label': ' Anual', 'value': 12}],
            value=1,
            id = 'agregacao',
            labelStyle = {'display':'block'},
        ),
        html.Hr(),
        dcc.RadioItems(
            options=[
                {'label': ' Anomalia de Precipitação', 'value': 'anomalia_%'},
                {'label': ' Precipitação Total', 'value': 'acum_mm'}],
            value = 'anomalia_%',
            id = 'variavel',
            labelStyle = {'display':'block'},
        ),
    ], className="my-3"),
    html.Hr(),
    html.Br(),
    html.H6(
        "Para duvidas e demais informações contactar pelo email : arlan.scortegagna@simepar.br."
    ),
    html.Br(),
]

)



#app--------------------------------------------------------------------------------------------

layout = html.Div([

    dcc.Location(id="url"),
    dcc.Store(
        id="clientside-store-figure"
        ),
    dcc.Store(
        id="qual_df"
        ),
    dcc.Store(
        id= "dados"
        ),
    html.Div(children = [sidebar], style=SIDEBAR_STYLE),
    html.Div(children = [dcc.Graph(id='choropleth')], style=CONTENT_STYLE)

])
@callback(
    Output("clientside-store-figure", "data"),
    Output("qual_df", "data"),
    Input("limites", "value")
    )
def delimitacao(limite):


    if limite == "muns":
        descolhido = 'dmuns'
        geojson = muns
    else:
        descolhido = 'duhs'
        geojson= uhs
    return geojson , descolhido

@callback(
    Output('dados', 'data'),
    Input('referencia', 'value'),
    Input('clientside-store-figure', 'data'),
    Input("qual_df", "data"),
    Input('variavel', 'value'),
    Input('agregacao', 'value')
)
def update_store_data(referencia, limites,descolhido ,variavel, agregacao):
    if descolhido == "dmuns":
        dx = dmuns.loc[referencia,agregacao]
    else:
        dx = duhs.loc[referencia,agregacao]

    if agregacao == 1:
        agrega = "mensal"
    elif  agregacao == 3:
            agrega = "trimestral"
    elif agregacao == 6:
        agrega = "semestral"
    elif agregacao == 12:
        agrega ="anual"
    if variavel == "anomalia_%":
        range1 = [-110, 110]
        legendaaa = ("Anomalia de precipitação")

    else:
        range1 = [0,350]
        legendaaa = ("Precipitação total ")

    # dx = descolhido.loc[referencia, agregacao]
    fig = px.choropleth_mapbox(dx,
        geojson = limites,
        color = variavel,
        locations = 'id',
        featureidkey = 'properties.id',
        range_color = range1,
        center = {"lat": -24.6344, "lon": -51.0150},
        hover_name = 'nome',
        hover_data = {'id':False, variavel:':.2f'},
        labels = {'anomalia_%': 'Anomalia (%)', 'acum_mm':'Precipitação Total (mm)'},
        color_continuous_scale = px.colors.diverging.BrBG,
        opacity = 0.8,
        mapbox_style = "open-street-map",
        zoom=6.5)

    fig.update_layout(
    autosize=True,

    margin=dict(r=0, l=0, b=0, t=100),
    coloraxis_colorbar_x = 0.9,
    hovermode="closest",
    plot_bgcolor="#F9F9F9",
    paper_bgcolor="#F9F9F9",
    width=1300,
    height=910,
    font=dict(
        family="Courier New, monospace",

        color="black",
        ),
    title=(" Dados de {},\n em escala {}, em {}.".format(legendaaa,agrega,referencia,)),

    )
    fig['layout']['title']['font'] = dict(size=16)
    fig.add_layout_image(
    dict(
        source='data:image/png;base64,{}'.format(encoded_image.decode()),
        xref="paper", yref="paper",
        x=1, y=1.05,
        sizex=0.2, sizey=0.2,
        xanchor="right", yanchor="bottom"
    )
)
    return fig


clientside_callback(
    """
    function(figure_data, title_text) {
        if(figure_data === undefined) {
            return {'data': [], 'layout': {}};
        }
        const fig = Object.assign({}, figure_data, {
                'layout': {
                    ...figure_data.layout,
                    'title': {
                        ...figure_data.layout.title, text: title_text
                    }
                }
        });
        return fig;
    }
    """,
    Output('choropleth', 'figure'),
    Input('dados', 'data'),

)



